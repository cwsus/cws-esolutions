DELIMITER //

DROP TABLE IF EXISTS ESOLUTIONS.PLATFORMS //

CREATE TABLE ESOLUTIONS.PLATFORMS (
    GUID VARCHAR(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL UNIQUE,
    PLATFORMNAME VARCHAR(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
    REGION VARCHAR(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
    NWPARTITION VARCHAR(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
    PLATFORMSTATUS VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT 'INACTIVE',
    SERVERS TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,
    PLATFORMDESCRIPTION TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,
    PRIMARY KEY (GUID),
    FULLTEXT KEY IDX_PLATFORMS (PLATFORMNAME, REGION, NWPARTITION)
) ENGINE=InnoDB CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COLLATE utf8mb4_0900_ai_ci //
COMMIT //

GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE ON ESOLUTIONS.* TO 'appadm'@'localhost' //
GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE ON ESOLUTIONS.* TO 'appadm'@'appsrv.lan' //

DROP PROCEDURE IF EXISTS ESOLUTIONS.getPlatformByAttribute //
DROP PROCEDURE IF EXISTS ESOLUTIONS.addNewPlatform //
DROP PROCEDURE IF EXISTS ESOLUTIONS.updatePlatformData //
DROP PROCEDURE IF EXISTS ESOLUTIONS.removePlatformData //
DROP PROCEDURE IF EXISTS ESOLUTIONS.getPlatformData //
DROP PROCEDURE IF EXISTS ESOLUTIONS.getPlatformCount //
DROP PROCEDURE IF EXISTS ESOLUTIONS.listPlatforms //

CREATE PROCEDURE ESOLUTIONS.getPlatformByAttribute(
    IN attributeName VARCHAR(100),
    IN startRow INT
)
BEGIN
    SELECT
        GUID,
        PLATFORMNAME,
    MATCH (PLATFORMNAME, REGION, NWPARTITION)
    AGAINST (+attributeName WITH QUERY EXPANSION)
    FROM ESOLUTIONS.PLATFORMS
    WHERE MATCH (PLATFORMNAME, REGION, NWPARTITION)
    AGAINST (+attributeName IN BOOLEAN MODE)
    AND PLATFORMSTATUS = 'ACTIVE'
    LIMIT startRow, 20;
END //
COMMIT //

CREATE PROCEDURE ESOLUTIONS.addNewPlatform(
    IN guid VARCHAR(128),
    IN plName VARCHAR(128),
    IN region VARCHAR(15),
    IN nwpartition VARCHAR(15),
    IN plStatus VARCHAR(50),
    IN plDesc TEXT
)
BEGIN
    INSERT INTO ESOLUTIONS.PLATFORMS (GUID, PLATFORMNAME, REGION, NWPARTITION, PLATFORMSTATUS, PLATFORMDESCRIPTION)
    VALUES (guid, plName, region, nwpartition, plStatus, plDesc);

    COMMIT;
END //
COMMIT //

CREATE PROCEDURE ESOLUTIONS.updatePlatformData(
    IN sGuid VARCHAR(128),
    IN plName VARCHAR(128),
    IN region VARCHAR(15),
    IN nwpartition VARCHAR(15),
    IN plStatus VARCHAR(50),
    IN plDescription TEXT,
    OUT updateCount INTEGER
)
BEGIN
    UPDATE ESOLUTIONS.PLATFORMS
    SET
        PLATFORMNAME = plName,
        REGION = region,
        NWPARTITION = nwpartition,
        PLATFORMSTATUS = plStatus,
        PLATFORMDESCRIPTION = plDescription
    WHERE GUID = sGuid;

    COMMIT;

    SELECT COUNT(*)
    INTO updateCount
    FROM ESOLUTIONS.PLATFORMS
    WHERE GUID = sGuid
    AND PLATFORMNAME = plName
    AND REGION = region
    AND NWPARTITION = nwpartition
    AND PLATFORMSTATUS = plStatus
    AND PLATFORMDESCRIPTION = plDescription;
END //
COMMIT //

CREATE PROCEDURE ESOLUTIONS.removePlatformData(
    IN platformGuid VARCHAR(128)
)
BEGIN
    UPDATE ESOLUTIONS.PLATFORMS
    SET PLATFORMSTATUS = 'INACTIVE'
    WHERE GUID = platformGuid;

    COMMIT;
END //
COMMIT //

CREATE PROCEDURE ESOLUTIONS.getPlatformData(
    IN guid VARCHAR(128)
)
BEGIN
    SELECT
        GUID,
        PLATFORMNAME,
        REGION,
        NWPARTITION,
        PLATFORMSTATUS,
        PLATFORMDESCRIPTION
    FROM ESOLUTIONS.PLATFORMS
    WHERE GUID = guid
    AND PLATFORMSTATUS = 'ACTIVE';
END //
COMMIT //

CREATE PROCEDURE ESOLUTIONS.getPlatformCount(
)
BEGIN
    SELECT COUNT(*)
    FROM ESOLUTIONS.PLATFORMS
    WHERE PLATFORMSTATUS = 'ACTIVE';
END //
COMMIT //

CREATE PROCEDURE ESOLUTIONS.listPlatforms(
    IN startRow INT
)
BEGIN
    SELECT
        GUID,
        PLATFORMNAME
    FROM ESOLUTIONS.PLATFORMS
    WHERE PLATFORMSTATUS = 'ACTIVE'
    LIMIT startRow, 20;
END //
COMMIT //

GRANT EXECUTE ON PROCEDURE ESOLUTIONS.getPlatformByAttribute TO 'appadm'@'localhost' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.addNewPlatform TO 'appadm'@'localhost' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.updatePlatformData TO 'appadm'@'localhost' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.removePlatformData TO 'appadm'@'localhost' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.getPlatformData TO 'appadm'@'localhost' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.getPlatformCount TO 'appadm'@'localhost' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.listPlatforms TO 'appadm'@'localhost' //

GRANT EXECUTE ON PROCEDURE ESOLUTIONS.getPlatformByAttribute TO 'appadm'@'appsrv.lan' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.addNewPlatform TO 'appadm'@'appsrv.lan' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.updatePlatformData TO 'appadm'@'appsrv.lan' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.removePlatformData TO 'appadm'@'appsrv.lan' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.getPlatformData TO 'appadm'@'appsrv.lan' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.getPlatformCount TO 'appadm'@'appsrv.lan' //
GRANT EXECUTE ON PROCEDURE ESOLUTIONS.listPlatforms TO 'appadm'@'appsrv.lan' //

DELIMITER ;
